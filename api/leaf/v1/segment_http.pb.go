// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.25.3
// source: leaf/v1/segment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLeafSegmentServiceGetSegmentId = "/leaf.v1.LeafSegmentService/GetSegmentId"

type LeafSegmentServiceHTTPServer interface {
	GetSegmentId(context.Context, *GenIdsRequest) (*GenIdsResponse, error)
}

func RegisterLeafSegmentServiceHTTPServer(s *http.Server, srv LeafSegmentServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/segment/get/{bizTag}", _LeafSegmentService_GetSegmentId0_HTTP_Handler(srv))
}

func _LeafSegmentService_GetSegmentId0_HTTP_Handler(srv LeafSegmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeafSegmentServiceGetSegmentId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSegmentId(ctx, req.(*GenIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenIdsResponse)
		return ctx.Result(200, reply.Ids)
	}
}

type LeafSegmentServiceHTTPClient interface {
	GetSegmentId(ctx context.Context, req *GenIdsRequest, opts ...http.CallOption) (rsp *GenIdsResponse, err error)
}

type LeafSegmentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLeafSegmentServiceHTTPClient(client *http.Client) LeafSegmentServiceHTTPClient {
	return &LeafSegmentServiceHTTPClientImpl{client}
}

func (c *LeafSegmentServiceHTTPClientImpl) GetSegmentId(ctx context.Context, in *GenIdsRequest, opts ...http.CallOption) (*GenIdsResponse, error) {
	var out GenIdsResponse
	pattern := "/api/segment/get/{bizTag}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeafSegmentServiceGetSegmentId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Ids, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
