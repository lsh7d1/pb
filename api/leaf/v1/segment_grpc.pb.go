// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: leaf/v1/segment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LeafSegmentService_GetSegmentId_FullMethodName = "/leaf.v1.LeafSegmentService/GetSegmentId"
)

// LeafSegmentServiceClient is the client API for LeafSegmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeafSegmentServiceClient interface {
	GetSegmentId(ctx context.Context, in *GenIdsRequest, opts ...grpc.CallOption) (*GenIdsResponse, error)
}

type leafSegmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeafSegmentServiceClient(cc grpc.ClientConnInterface) LeafSegmentServiceClient {
	return &leafSegmentServiceClient{cc}
}

func (c *leafSegmentServiceClient) GetSegmentId(ctx context.Context, in *GenIdsRequest, opts ...grpc.CallOption) (*GenIdsResponse, error) {
	out := new(GenIdsResponse)
	err := c.cc.Invoke(ctx, LeafSegmentService_GetSegmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeafSegmentServiceServer is the server API for LeafSegmentService service.
// All implementations must embed UnimplementedLeafSegmentServiceServer
// for forward compatibility
type LeafSegmentServiceServer interface {
	GetSegmentId(context.Context, *GenIdsRequest) (*GenIdsResponse, error)
	mustEmbedUnimplementedLeafSegmentServiceServer()
}

// UnimplementedLeafSegmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeafSegmentServiceServer struct {
}

func (UnimplementedLeafSegmentServiceServer) GetSegmentId(context.Context, *GenIdsRequest) (*GenIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentId not implemented")
}
func (UnimplementedLeafSegmentServiceServer) mustEmbedUnimplementedLeafSegmentServiceServer() {}

// UnsafeLeafSegmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeafSegmentServiceServer will
// result in compilation errors.
type UnsafeLeafSegmentServiceServer interface {
	mustEmbedUnimplementedLeafSegmentServiceServer()
}

func RegisterLeafSegmentServiceServer(s grpc.ServiceRegistrar, srv LeafSegmentServiceServer) {
	s.RegisterService(&LeafSegmentService_ServiceDesc, srv)
}

func _LeafSegmentService_GetSegmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafSegmentServiceServer).GetSegmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeafSegmentService_GetSegmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafSegmentServiceServer).GetSegmentId(ctx, req.(*GenIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeafSegmentService_ServiceDesc is the grpc.ServiceDesc for LeafSegmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeafSegmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaf.v1.LeafSegmentService",
	HandlerType: (*LeafSegmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSegmentId",
			Handler:    _LeafSegmentService_GetSegmentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaf/v1/segment.proto",
}
